#include <vector>
#include <string>
#include <algorithm>

class Solution {
public:
    void solve(const vector<int>& input, vector<int>& output, vector<vector<int>>& result) {
        if (input.size() == 0) {
            result.push_back(output);
            return;
        }

        for (size_t i = 0; i < input.size(); ++i) {
            // Avoid duplicates in permutations
            if (i > 0 && input[i] == input[i - 1])
                continue;

            vector<int> newInput = input;
            newInput.erase(newInput.begin() + i);

            vector<int> newOutput = output;
            newOutput.push_back(input[i]);

            solve(newInput, newOutput, result);
        }
    }

    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> output;

        // Sort the input vector to handle duplicates
        sort(nums.begin(), nums.end());

        solve(nums, output, result);
        return result;
    }
};
